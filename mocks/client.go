// Code generated by MockGen. DO NOT EDIT.
// Source: clients/form3-client.go

// Package mock_form3_client is a generated GoMock package.
package mock_form3_client

import (
	models "form3-interview/models"
	io "io"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockForm3ClientIface is a mock of Form3ClientIface interface.
type MockForm3ClientIface struct {
	ctrl     *gomock.Controller
	recorder *MockForm3ClientIfaceMockRecorder
}

// MockForm3ClientIfaceMockRecorder is the mock recorder for MockForm3ClientIface.
type MockForm3ClientIfaceMockRecorder struct {
	mock *MockForm3ClientIface
}

// NewMockForm3ClientIface creates a new mock instance.
func NewMockForm3ClientIface(ctrl *gomock.Controller) *MockForm3ClientIface {
	mock := &MockForm3ClientIface{ctrl: ctrl}
	mock.recorder = &MockForm3ClientIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockForm3ClientIface) EXPECT() *MockForm3ClientIfaceMockRecorder {
	return m.recorder
}

// DeleteAccount mocks base method.
func (m *MockForm3ClientIface) DeleteAccount(accountId, version string) models.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", accountId, version)
	ret0, _ := ret[0].(models.AppError)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockForm3ClientIfaceMockRecorder) DeleteAccount(accountId, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockForm3ClientIface)(nil).DeleteAccount), accountId, version)
}

// Do mocks base method.
func (m *MockForm3ClientIface) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockForm3ClientIfaceMockRecorder) Do(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockForm3ClientIface)(nil).Do), req)
}

// GetAccount mocks base method.
func (m *MockForm3ClientIface) GetAccount(accountId string) (models.AccountWrapper, models.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", accountId)
	ret0, _ := ret[0].(models.AccountWrapper)
	ret1, _ := ret[1].(models.AppError)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockForm3ClientIfaceMockRecorder) GetAccount(accountId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockForm3ClientIface)(nil).GetAccount), accountId)
}

// PostAccount mocks base method.
func (m *MockForm3ClientIface) PostAccount(body io.Reader) (models.AccountWrapper, models.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostAccount", body)
	ret0, _ := ret[0].(models.AccountWrapper)
	ret1, _ := ret[1].(models.AppError)
	return ret0, ret1
}

// PostAccount indicates an expected call of PostAccount.
func (mr *MockForm3ClientIfaceMockRecorder) PostAccount(body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAccount", reflect.TypeOf((*MockForm3ClientIface)(nil).PostAccount), body)
}
